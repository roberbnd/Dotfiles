# IIFE Immediately-invoket_funciton_expression

extends js-node
extends js-react

snippet log "console.log" w
console.log(${1:${VISUAL}})
endsnippet

snippet logm "console.log" wA
console.log("====================================")
console.log($1)
console.log("====================================")
endsnippet

snippet "(\w+)cg" "console.log" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet "(\w+)cg" "console.log" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet "(\w+)LL" "let" rA
let `!p snip.rv = match.group(1)` = $0
endsnippet

snippet "(\w+)Ln" "let" rA
let `!p snip.rv = match.group(1)` in $0
endsnippet

snippet "(\w+)CC" "const" rA
const `!p snip.rv = match.group(1)` = $0
endsnippet

snippet "(\w+)ec" "export const" r
export const `!p snip.rv = match.group(1)` = $0
endsnippet

snippet hostname "const hostname" b
const hostname = '127.0.0.1'
endsnippet

snippet af "anonymous function" b
const $1 = ($2) => {$3}
endsnippet

snippet afo "anonymous function open" b
const $1 = ($2) => {
  $3
}
endsnippet

snippet cer "console error" b
console.error(error)
endsnippet

snippet clo "console log" b
console.log($1)
endsnippet

snippet class "class template" b
class $1 {
  constructor($2) {
	  ${3:this.$2}$4
	}
	$5
}
endsnippet

snippet comm "Comment big block" b
/**
|--------------------------------------------------
| $1
|--------------------------------------------------
*/
endsnippet

snippet dow "do..while" b
do {
 $2
}while($1)
endsnippet

snippet ed "export default" b
export default $1
endsnippet

snippet eta "e.target" w
e.target.$1
endsnippet

snippet fin "for in" b
for (${1:let ${2:key}} in ${3:items}) {
  $4
}
endsnippet

snippet fof "for of" b
for (${1:let ${2:value}} of ${3:items}) {
  $4
}
endsnippet

snippet forr "for" b
for (let ${1:i} = $2; $1 ${3:<} $4; ${5:$1++} ) {
  $6
}
endsnippet

snippet funn "function name" b
function $1 ($2) {
  ${3://code}
}
endsnippet

snippet funl "function" w
function ($2) {
  ${3://code}
}
endsnippet

snippet fune "function error" w
function (error) {
	if (error) {
		console.error(error)
	}
}
endsnippet

snippet funa "function anonima" w
function ($2) {
  ${3://code}
}
endsnippet

snippet funr "function anonima" w
function (req, res) {
  ${3://code}
}
endsnippet

snippet if "if" b
if (${1:${2:val1} ${3:==} ${4:val2}}) {
  $6
}
endsnippet

snippet ifn "if not equal" b
if (${1:${2:val1} ${3:!==} ${4:val2}}) {
  $6
}
endsnippet

snippet ifl "if equal one line" b
if (${1:${2:val1} ${3:==} ${4:val2}})
  $6
endsnippet

snippet imp "import" b
import $2 from '${1:path}'
endsnippet

snippet moef "module.exports fun" b
module.exports = function ($1) {
  $2
}
endsnippet

snippet nAr "new Array" w
new Array($1)
endsnippet

snippet rej "require" w
require('$1')
endsnippet

# Testing
###########
snippet tt "test" b
test('$1', () => {
  $2
})
endsnippet

snippet tit "test it" b
it('should $1', $2($3) => {
  $4
})
endsnippet

snippet tdes "test describe" b
describe('$1', () => {
  $2
})
endsnippet

snippet set "setTimeout" b
setTimeout( () => {
  $2
}, $1)
endsnippet

snippet whi "while" b
while ($1) {
  $2
}
endsnippet

snippet rn "return" w
return $1
endsnippet

snippet use "use strict" b
'use strict'

$1
endsnippet
